DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS films_genres CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS director_film CASCADE;
DROP TABLE IF EXISTS directors CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS Reviews CASCADE;
DROP TABLE IF EXISTS Reviews_likes CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TYPE IF EXISTS enum_event_type;
DROP TYPE IF EXISTS enum_event_operation;

create table if not exists users (
    id int generated by default as identity primary key,
    email varchar(50),
    login varchar(200),
    name varchar(50),
    birthday timestamp
);

create table if not exists mpa (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists genres (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists films (
    id int generated by default as identity primary key,
    name varchar(50),
    description varchar(200),
    release_date timestamp,
    duration int,
    rate int,
    mpa_id int REFERENCES mpa (id)
    on delete cascade
    on update cascade,
    CONSTRAINT fk_films_mpa
    FOREIGN KEY (mpa_id)
    REFERENCES mpa (id)
);

create table if not exists films_genres (
    film_id int REFERENCES films(id)
    on delete cascade
    on update cascade,
    genre_id int REFERENCES genres(id)
    on delete cascade
    on update cascade
);

create table if not exists friends (
    user_id int REFERENCES users(id)
    on delete cascade
    on update cascade,
    friend_id int REFERENCES users(id)
    on delete cascade
    on update cascade
);

create table if not exists likes (
    film_id int REFERENCES films(id)
    on delete cascade
    on update cascade,
    user_id int REFERENCES users(id)
    on delete cascade
    on update cascade
);

create table if not exists directors (
    id int generated by default as identity primary key,
    name varchar(50)
    );

create table if not exists director_film (
    director_id int REFERENCES directors (id)
    on delete cascade
    on update cascade,
    film_id int REFERENCES films (id)
    on delete cascade
    on update cascade,
    PRIMARY KEY (director_id, film_id)
    );

create table if not exists Reviews (
    id int generated by default as identity primary key,
    content varchar not null ,
    is_positive boolean not null ,
    rate integer default 0,
    film_id integer references films(id)
    on delete cascade
    on update cascade,
    user_id integer references users(id)
    on delete cascade
    on update cascade
    );

create table if not exists Reviews_likes (
    review_id integer references Reviews(id)
    on delete cascade
    on update cascade,
    user_id integer references users (id)
    on delete cascade
    on update cascade,
    is_useful boolean not null
    );

create type if not exists enum_event_type AS enum ('LIKE', 'REVIEW', 'FRIEND');
create type if not exists enum_event_operation as enum ('REMOVE', 'ADD', 'UPDATE');

create table if not exists events (
    event_id int generated by default as identity primary key,
    user_id int REFERENCES users (id)
    on delete cascade
    on update cascade,
    entity_id int,
    event_type enum_event_type,
    operation enum_event_operation,
    timestamp bigint,
    CONSTRAINT fk_events_user
            FOREIGN KEY (user_id)
                REFERENCES users (id)
);