DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS films_genres;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS mpa;
DROP TABLE IF EXISTS users;

create table if not exists users (
    id int generated by default as identity primary key,
    email varchar(50),
    login varchar(200),
    name varchar(50),
    birthday timestamp
);

create table if not exists mpa (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists genres (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists films (
    id int generated by default as identity primary key,
    name varchar(50),
    description varchar(200),
    release_date timestamp,
    duration int,
    rate int,
    mpa_id int,
    CONSTRAINT fk_films_mpa
        FOREIGN KEY (mpa_id)
            REFERENCES mpa (id)
);

create table if not exists films_genres (
    film_id int REFERENCES films(id),
    genre_id int REFERENCES genres(id)
);

create table if not exists friends (
    user_id int REFERENCES users(id),
    friend_id int REFERENCES users(id)
);

create table if not exists likes (
    film_id int REFERENCES films(id),
    user_id int REFERENCES users(id)
);

create table IF NOT EXISTS Reviews
(
    id int generated by default as identity primary key,
    content varchar not null ,
    is_positive boolean not null ,
    rate integer default 0,
    film_id integer references films(id) on delete cascade ,
    user_id integer references USERS(id) on delete cascade
);

create table IF NOT EXISTS Reviews_likes
(
    review_id integer references Reviews(id) on delete cascade ,
    user_id integer references users (id) on delete cascade,
    is_useful boolean not null
);
